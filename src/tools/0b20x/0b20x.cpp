#include "Epp.h"

using namespace Epp;
using namespace Epp::base;

static const c8 *text =
		"const u8 MATRIX_ASCII_3X5_1BPP_DATA[95][2] = {\n\
{ // [ 0 ]\n\
	0b00000000, 0b00000000,\n\
},\n\
{ // [ 0 ]\n\
	0b01001001, 0b00000100,\n\
},\n\
{ // [ 0 ]\n\
	0b10110100, 0b00000000,\n\
},\n\
{ // [ 0 ]\n\
	0b10111110, 0b11111010,\n\
},\n\
{ // [ 0 ]\n\
	0b01011101, 0b01110100,\n\
},\n\
{ // [ 0 ]\n\
	0b10000101, 0b01000010,\n\
},\n\
{ // [ 0 ]\n\
	0b01000111, 0b01010100,\n\
},\n\
{ // [ 0 ]\n\
	0b01001000, 0b00000000,\n\
},\n\
{ // [ 0 ]\n\
	0b01010010, 0b01000100,\n\
},\n\
{ // [ 0 ]\n\
	0b01000100, 0b10010100,\n\
},\n\
{ // [ 0 ]\n\
	0b00001010, 0b10100000,\n\
},\n\
{ // [ 0 ]\n\
	0b00001011, 0b10100000,\n\
},\n\
{ // [ 0 ]\n\
	0b00000000, 0b00100100,\n\
},\n\
{ // [ 0 ]\n\
	0b00000011, 0b10000000,\n\
},\n\
{ // [ 0 ]\n\
	0b00000000, 0b00100000,\n\
},\n\
{ // [ 0 ]\n\
	0b00000101, 0b01000000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110110, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11001001, 0b00101110,\n\
},\n\
{ // [ 0 ]\n\
	0b11100111, 0b11001110,\n\
},\n\
{ // [ 0 ]\n\
	0b11100101, 0b10011110,\n\
},\n\
{ // [ 0 ]\n\
	0b10110111, 0b10010010,\n\
},\n\
{ // [ 0 ]\n\
	0b11110011, 0b10011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110011, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11100100, 0b10010010,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b10011110,\n\
},\n\
{ // [ 0 ]\n\
	0b00001000, 0b00100000,\n\
},\n\
{ // [ 0 ]\n\
	0b00001000, 0b00100100,\n\
},\n\
{ // [ 0 ]\n\
	0b00101010, 0b00100010,\n\
},\n\
{ // [ 0 ]\n\
	0b00011100, 0b01110000,\n\
},\n\
{ // [ 0 ]\n\
	0b10001000, 0b10101000,\n\
},\n\
{ // [ 0 ]\n\
	0b11100101, 0b00000100,\n\
},\n\
{ // [ 0 ]\n\
	0b11110110, 0b11001110,\n\
},\n\
{ // [ 0 ]\n\
	0b01010111, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b11010111, 0b01011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110010, 0b01001110,\n\
},\n\
{ // [ 0 ]\n\
	0b11010110, 0b11011100,\n\
},\n\
{ // [ 0 ]\n\
	0b11110011, 0b11001110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110011, 0b11001000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110010, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b10110111, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b11101001, 0b00101110,\n\
},\n\
{ // [ 0 ]\n\
	0b11101001, 0b00101100,\n\
},\n\
{ // [ 0 ]\n\
	0b10011110, 0b01101010,\n\
},\n\
{ // [ 0 ]\n\
	0b10010010, 0b01001110,\n\
},\n\
{ // [ 0 ]\n\
	0b10111111, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b11110110, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b01010110, 0b11010100,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b11001000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b10010010,\n\
},\n\
{ // [ 0 ]\n\
	0b10011110, 0b01001000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110001, 0b00011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11101001, 0b00100100,\n\
},\n\
{ // [ 0 ]\n\
	0b10110110, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b10110110, 0b11010100,\n\
},\n\
{ // [ 0 ]\n\
	0b10110111, 0b11111010,\n\
},\n\
{ // [ 0 ]\n\
	0b10110101, 0b01011010,\n\
},\n\
{ // [ 0 ]\n\
	0b10110110, 0b10100100,\n\
},\n\
{ // [ 0 ]\n\
	0b11100101, 0b01001110,\n\
},\n\
{ // [ 0 ]\n\
	0b11010010, 0b01001100,\n\
},\n\
{ // [ 0 ]\n\
	0b00010001, 0b00010000,\n\
},\n\
{ // [ 0 ]\n\
	0b01100100, 0b10010110,\n\
},\n\
{ // [ 0 ]\n\
	0b01010100, 0b00000000,\n\
},\n\
{ // [ 0 ]\n\
	0b00000000, 0b00001110,\n\
},\n\
{ // [ 0 ]\n\
	0b01000100, 0b00000000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b10010011, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110110, 0b01001110,\n\
},\n\
{ // [ 0 ]\n\
	0b00100111, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b11001110,\n\
},\n\
{ // [ 0 ]\n\
	0b11110011, 0b01001000,\n\
},\n\
{ // [ 0 ]\n\
	0b11110111, 0b10010110,\n\
},\n\
{ // [ 0 ]\n\
	0b10010011, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b01000001, 0b00100100,\n\
},\n\
{ // [ 0 ]\n\
	0b01000001, 0b00101100,\n\
},\n\
{ // [ 0 ]\n\
	0b10010111, 0b01011010,\n\
},\n\
{ // [ 0 ]\n\
	0b01001001, 0b00100110,\n\
},\n\
{ // [ 0 ]\n\
	0b00010111, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b00011110, 0b11011010,\n\
},\n\
{ // [ 0 ]\n\
	0b00001010, 0b11010100,\n\
},\n\
{ // [ 0 ]\n\
	0b00011110, 0b11111000,\n\
},\n\
{ // [ 0 ]\n\
	0b00011110, 0b11110010,\n\
},\n\
{ // [ 0 ]\n\
	0b00010011, 0b01001000,\n\
},\n\
{ // [ 0 ]\n\
	0b01110001, 0b00011100,\n\
},\n\
{ // [ 0 ]\n\
	0b01011101, 0b00100110,\n\
},\n\
{ // [ 0 ]\n\
	0b00010110, 0b11011110,\n\
},\n\
{ // [ 0 ]\n\
	0b00010110, 0b11010100,\n\
},\n\
{ // [ 0 ]\n\
	0b00010110, 0b11111010,\n\
},\n\
{ // [ 0 ]\n\
	0b00010101, 0b01010000,\n\
},\n\
{ // [ 0 ]\n\
	0b10110111, 0b10011110,\n\
},\n\
{ // [ 0 ]\n\
	0b00011101, 0b01001110,\n\
},\n\
{ // [ 0 ]\n\
	0b00101011, 0b00100010,\n\
},\n\
{ // [ 0 ]\n\
	0b01001001, 0b00100100,\n\
},\n\
{ // [ 0 ]\n\
	0b10001001, 0b10101000,\n\
},\n\
{ // [ 0 ]\n\
	0b00000111, 0b11000000,\n\
},\n\
";

i32 tools_0b20x_main(i32 argc, c8 **argv) {
	(void) argc;
	(void) argv;

	i32 c = ' ';
	for (i32 i = 0; i < String::strlen(text); i++) {
		if (text[i] == '[' and text[i + 1] == ' ' and text[i + 2] == '0') {
			OS::Printf("[ %c ]", c);
			c++;
			i = i + 4;
		} else if (text[i] == '0' and text[i + 1] == 'b') {
			i32 value = 0;
			// 计算
			i = i + 2;
			for (i32 j = 0; j < 8; j++, i++) {
				value = value | (text[i] == '1' ? 1 : 0) << (7 - j);
			}
			// 输出
			OS::Printf("0x%02X", value);
			i = i - 1;
		} else {
			OS::Printf("%c", text[i]);
		}
	}

	return 0;
}
